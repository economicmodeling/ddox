- import ddox.api;
- import std.algorithm;
- import std.typetuple;

- void outputCompositeDescription(CompositeTypeDeclaration item)
	- auto cls_item = cast(ClassDeclaration)item;
	- auto intf_item = cast(InterfaceDeclaration)item;

	- if( cls_item && (cls_item.baseClass || cls_item.derivedInterfaces.length) )
		section
			h3 Inherits from

			ul
				- if( cls_item.baseClass )
					li
						code.prettyprint.lang-d!= info.formatType(cls_item.baseClass)
						| (base class)
				- foreach( intf; cls_item.derivedInterfaces )
					li
						code.prettyprint.lang-d!= info.formatType(intf)
	
	- if( intf_item && intf_item.derivedInterfaces.length )
		section
			h3 Inherits from

			ul
				- foreach( intf; intf_item.derivedInterfaces )
					li
						code.prettyprint.lang-d!= info.formatType(intf)

	h3 Declaration
		pre.code.prettyprint.lang-d.prototype
			|(class )#{item.name}#{item.templateArgsString}#{item.constraintString}


- void outputCompositeMembers(CompositeTypeDeclaration item)
	- alias TypeTuple!(InterfaceDeclaration, ClassDeclaration, StructDeclaration, UnionDeclaration, EnumDeclaration, AliasDeclaration, TemplateDeclaration) kinds;
	- auto kindnames =      ["Inner interfaces", "Inner classes", "Inner structs", "Unions", "Enums", "Aliases", "Templates"];
	- auto kindnames_sing = ["Inner interface",  "Inner class",   "Inner struct",  "Union",  "Enum",  "Alias",   "Template"];

	- FunctionDeclaration[] properties, methods, constructors;
	- foreach( itm; getDocGroups!FunctionDeclaration(item) )
		- if( itm.hasAttribute("@property") )
			- properties ~= itm;
		- else if( itm.name != "this" )
			- methods ~= itm;
		- else
			- constructors ~= itm;

	- if( constructors.length )
		section
			h3 Constructors
			table
				col.caption
				tr
					th Name
					th Description
				- foreach( p; constructors )
					tr
						td
							a(href="#{info.linkTo(p)}", class=declStyleClasses(p))
								code= p.name
						td!= info.formatDoc(p.docGroup, 3, sec => sec == "$Short")

	- if( hasChild!VariableDeclaration(item) )
		section
			h3 Fields
			table
				col.caption
				tr
					th Name
					th Type
					th Description
				- foreach( f; getChildren!VariableDeclaration(item) )
					tr
						td
							a(href="#{info.linkTo(f)}", class=declStyleClasses(f)) <code>#{f.name}</code>
						td!= info.formatType(f.type)
						td!= info.formatDoc(f.docGroup, 3, sec => sec == "$Short")

	- if( properties.length )
		section
			h3 Properties
			table
				col.caption
				tr
					th Name
					th Type
					th Description
				- foreach( p; properties )
					- auto mems = p.docGroup ? p.docGroup.members : [cast(Entity)p];
					tr
						td
							a(href="#{info.linkTo(p)}", class=declStyleClasses(p)) <code>#{p.name}</code>
							span.tableEntryAnnotation= anyPropertyGetter(mems) ? anyPropertySetter(mems) ? "[get, set]" : "[get]" : "[set]"
						td!= info.formatType(getPropertyType(mems))
						td!= info.formatDoc(p.docGroup, 3, sec => sec == "$Short")

	- if( methods.length )
		section
			h3 Methods
			table
				col.caption
				tr
					th Name
					th Description
				- foreach( p; methods )
					tr
						td
							a(href="#{info.linkTo(p)}", class=declStyleClasses(p))
								code= p.name
						td!= info.formatDoc(p.docGroup, 3, sec => sec == "$Short")

	- foreach( i, kind; kinds )
		- if( hasChild!kind(item) )
			section
				h3= kindnames[i]
				table
					col.caption
					tr
						th Name
						th Description
					- foreach( grp; getDocGroups!kind(item) )
						tr
							td
								a(href="#{info.linkTo(grp)}", class=declStyleClasses(grp))
									code= grp.name
							td!= info.formatDoc(grp.docGroup, 3, sec => sec == "$Short")
